generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model TestStuff {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  name  String?
}


//////// Test Schemas  Start /////////
model TestAdmin {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String?
  lastName String?
  email String? @unique
  rel_id    String?     @db.ObjectId
  relation  TestRelation?  @relation(name:"test", fields: [rel_id], references: [id])
}

model TestAccount {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  product String
  company String
  manageRole String
  status String
}

model TestRelation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  test  TestAdmin[] @relation("test")
}


model TestCompany {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String
}

//////// Test Schemas  Start /////////

//////----------------Enums-Start---------------------///////
enum RoleEnum {
  ADMIN
}


//////----------------Enums-End---------------------///////

//////----------------Types-Start---------------------///////
//// These are the OBJECTS which will be stored as Object in various table columns.

type Education {
  id          String
  school_name String
  degree      String
  discipline  String
  CGPA        String
  attachment  String? @db.ObjectId
}

type Experience {
  id                String
  company_name      String
  job_title         String
  start_date        String
  end_date          String
  currently_working Boolean
  attachment        String? @db.ObjectId
}

type JobReferences {
  id           String
  company_name String
  position     String
  email        String
}

//////----------------Types-End---------------------///////

//////----------------Models-Start---------------------///////
model Admin {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  role             RoleEnum @default(ADMIN)
  is_product_owner Boolean  @default(false)
  first_name       String
  middle_name      String?
  last_name        String
  email            String   @unique
  phone_number     String?
  post_code        String?
  flat_or_unit     String?
  building_name    String?
  building_number  String?
  street_name      String?
  town_or_city     String?
  country          String?
  job_title        String?
  facebook_url     String?
  linked_url       String?
  status           String   @default("active")
  created_by_id    String?  @unique @db.ObjectId
  created_by_user  Admin?   @relation(name: "creator", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  created_by       Admin?   @relation("creator")
  updated_by_id    String?  @unique @db.ObjectId
  updated_by_user  Admin?   @relation(name: "updater", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updated_by       Admin?   @relation("updater")
  deleted_by_id    String?  @unique @db.ObjectId
  deleted_by_user  Admin?   @relation(name: "deleter", fields: [deleted_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  deleted_by       Admin?   @relation("deleter")
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  deleted_at       DateTime @default(now())
  jobs             Job[]
  products         Product[]
}

model Job {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  created_by_id     String        @db.ObjectId
  created_by        Admin         @relation(fields: [created_by_id], references: [id])
  title             String
  job_type          String
  job_category      String
  experience        String
  number_of_vacancy Int?
  deadline          DateTime
  status            String         @default("OPEN")
  isDeleted         Boolean        @default(false)
  description       String?
  applicants        JobApplicant[]
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
}

model JobApplicant {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  job_id              String?     @db.ObjectId
  job                 Job?        @relation(fields: [job_id], references: [id])
  first_name          String
  last_name           String
  email               String
  phone_number        String
  linked_in           String?
  website             String?
  github_url          String?
  years_of_experience String?
  gender              String?
  veteran_status      String?
  ethnicity           String?
  disability          String?
  resume_id           String?     @db.ObjectId
  resume              Attachment? @relation(name: "resume", fields: [resume_id], references: [id])
  cover_letter_id     String?     @db.ObjectId
  cover_letter        Attachment? @relation(name: "coverLetter", fields: [cover_letter_id], references: [id])
}

model Attachment {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  JobApplicantResume      JobApplicant[] @relation("resume")
  JobApplicantCoverLetter JobApplicant[] @relation("coverLetter")
  product_logo Product? @relation("productLogo")
}

model Event {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Plan {
  id                        String        @id @default(auto()) @map("_id") @db.ObjectId
  description               String?
  default_users             Int
  default_storage           Int
  plan_price                Float
  additional_per_user_price Float?
  additional_storage_price  Float?
  plan_type_id              String        @db.ObjectId
  plan_product              PlanProduct[]
  plan_type                 PlanType      @relation(fields: [plan_type_id], references: [id])
  created_at                DateTime      @default(now())
  updated_at                DateTime      @updatedAt
  is_active                 Boolean       @default(true)
}

model PlanType {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  plan Plan[]
}

model PlanProduct {
  id                             String                        @id @default(auto()) @map("_id") @db.ObjectId
  plan_id                        String                        @db.ObjectId
  product_id                     String                        @db.ObjectId
  plan_product_feature           PlanProductFeature[]
  plan_product_module            PlanProductModule[]
  plan_product_module_permission PlanProductModulePermission[]
  plan                           Plan                          @relation(fields: [plan_id], references: [id])
  product                        Product                       @relation(fields: [product_id], references: [id])
}

model PlanProductFeature {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  plan_id                   String      @db.ObjectId
  product_id                String      @db.ObjectId
  plan_product_id           String      @db.ObjectId
  feature_id                String      @db.ObjectId
  deals_associations_detail String?
  plan_product              PlanProduct @relation(fields: [plan_product_id], references: [id])
  feature                   Feature     @relation(fields: [feature_id], references: [id])
  product                   Product     @relation(fields: [product_id], references: [id])
}

model PlanProductModule {
  id                              String                        @id @default(auto()) @map("_id") @db.ObjectId
  plan_id                         String                        @db.ObjectId
  product_id                      String                        @db.ObjectId
  plan_product_id                 String                        @db.ObjectId
  module_id                       String                        @db.ObjectId
  plan_products_module_permission PlanProductModulePermission[]
  plan_product                    PlanProduct                   @relation(fields: [plan_product_id], references: [id])
  module                          Module                        @relation(fields: [module_id], references: [id])
  product                         Product                       @relation(fields: [product_id], references: [id])
}

model PlanProductModulePermission {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  plan_id                String            @db.ObjectId
  product_id             String            @db.ObjectId
  module_id              String            @db.ObjectId
  plan_product_module_id String            @db.ObjectId
  module_permission_id   String            @db.ObjectId
  plan_product_id        String            @db.ObjectId
  plan_product           PlanProduct       @relation(fields: [plan_product_id], references: [id])
  product                Product           @relation(fields: [product_id], references: [id])
  module                 Module            @relation(fields: [module_id], references: [id])
  Plan_products_module   PlanProductModule @relation(fields: [plan_product_module_id], references: [id])
  module_permission      ModulePermission  @relation(fields: [module_permission_id], references: [id])
}

model Product {
  id                             String                        @id @default(auto()) @map("_id") @db.ObjectId
  plan_product                   PlanProduct[]
  plan_product_feature           PlanProductFeature[]
  plan_product_module            PlanProductModule[]
  plan_product_module_permission PlanProductModulePermission[]
}

model Feature {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  plan_product_feature PlanProductFeature[]
}

model Module {
  id                             String                        @id @default(auto()) @map("_id") @db.ObjectId
  plan_product_module            PlanProductModule[]
  plan_product_module_permission PlanProductModulePermission[]
  module_permission              ModulePermission[]
}

model Permission {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  module_permission ModulePermission[]
}

model ModulePermission {
  id                             String                        @id @default(auto()) @map("_id") @db.ObjectId
  module_id                      String                        @db.ObjectId
  permission_id                  String                        @db.ObjectId
  module                         Module                        @relation(fields: [module_id], references: [id])
  permission                     Permission                    @relation(fields: [permission_id], references: [id])
  plan_product_module_permission PlanProductModulePermission[]
}

model Role {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Organization {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationSocialMediaIntegration {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationUser {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccount {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountRoleAndPermission {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountTask {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountFormType {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountForm {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountUser {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountDocumentFolder {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountDocumentFolderFile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountProduct {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountProductChat {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountProductChatUser {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountProductContact {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model OrganizationCompanyAccountProductRoleAndPermission {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String  @unique
}
model Product {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String @unique
  description   String?
  logo_id       String? @db.ObjectId @unique
  logo          Attachment?   @relation(name: "productLogo", fields: [logo_id], references: [id])
  status        String @default("inactive")
  modifier_id    String?  @db.ObjectId
  modified_by    Admin?   @relation(fields: [modifier_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  isDeleted      Boolean @default(false)  // For soft delete
  modified_at    DateTime @default(now())
}



model Asset {
    id                      String @id @default(auto()) @map("_id") @db.ObjectId
    display_name            String?
    asset_id                String? @unique @db.ObjectId
    asset_type              String?
    impact                  String?
    description             String?
    asset_life_expiry       DateTime?
    location                String?
    department              String?
    assigned_on             DateTime?
    used_by                 String?  
    file                    String?
}

//////----------------Models-End---------------------///////

/////------------- Air Services Schema--------------/////////

enum TicketStatusEnum { 
  OPEN
  CLOSED
  RESOLVED
}
enum TicketInternalTypeEnum { 
  INTERNAL
}

enum TicketTypeEnum { 
  INTERNAL
  EXTERNAL
}

enum TicketPirorityEnum { 
  HIGH
  LOW
}

model Tickets { 
    id String @id @default(auto()) @map("_id") @db.ObjectId
    details Json
    status TicketStatusEnum
    subject String
    pirority TicketPirorityEnum
    type TicketTypeEnum
    internal_type TicketInternalTypeEnum
    ca_id String? @db.ObjectId
    org_admin_id String? @db.ObjectId
    cat_id  String? @db.ObjectId
    created_at    DateTime @default(now())
}


////////------------------ ---------///////
